"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5685],{877861:function(e,t,a){a.r(t);var r=a(202784),n=a(213980),l=a.n(n),o=a(219637),i=a(198),s=a(471275),p=a(312594),c=a(790817),m=a(458264),d=a(323522),u=a(844204),h=a(850013),f=a(215476),E=a(713506),Z=a(700865),y=a(357521),v=a(32593),b=a.n(v),g=a(695688),w=a.n(g),x=a(848941),S=a.n(x),k=a(465810),C=a.n(k),q=a(74039),N=a.n(q),T=a(691403),$=a(194542),B=a(228713),P=a(99733),z=a(172888),Y=a(658774),_=a(506078),A=Object.defineProperty,G=(e,t,a)=>(((e,t,a)=>{t in e?A(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a})(e,"symbol"!=typeof t?t+"":t,a),a);const L={p:{tooltip:"Success probability"},n:{tooltip:"Number of trials"},alpha:{tooltip:"Significance level"},Z:{tooltip:"Standard normal quantile"}};class O extends r.Component{constructor(e){super(e),G(this,"onGenerate",((e,t,a)=>{let r=0,n=1-a,l=new Array(20);for(let o=0;o<20;o++){let a=new Array(e);for(let e=0;e<a.length;e++)a[e]=S()()<=t?1:0;let i,s=(0,P.Z)(a);i=this.state.useSampleProp?w()(s*(1-s)/e):w()(t*(1-t)/e);let p={num:o+1,yval:s,err:b()(i*C()(1-n/2,0,1))};p.text=p.yval-p.err>t||p.yval+p.err<t?"does not contain p":"contains p","contains p"===p.text&&(r+=1),p.text=`[${N()(p.yval-p.err,-2)}, ${N()(p.yval+p.err,-2)}] `+p.text,l[o]=p}this.setState({nTrapped:r,p:t,errorBars:l})})),this.state={errorBars:[],p:null,nTrapped:null,useSampleProp:!0}}renderChart(){const{errorBars:e}=this.state;return e&&0!==e.length?r.createElement(d.Z,{padding:30,height:180,theme:u.Z.material,domain:{y:[0,1]}},r.createElement(h.Z,{padding:20,standalone:!1,tickCount:20,style:{tickLabels:{fontSize:"9px"}}}),r.createElement(h.Z,{dependentAxis:!0,padding:20,standalone:!1}),r.createElement(f.Z,{animate:{duration:500},data:this.state.errorBars,labelComponent:r.createElement(E.Z,null),style:{data:{fill:e=>e.datum.yval-e.datum.err>this.state.p||e.datum.yval+e.datum.err<this.state.p?"darkred":"steelblue"}},x:"num",y:"yval",labels:e=>`Sample proportion ${N()(e.datum.yval,-3)}`}),r.createElement(Z.Z,{animate:{duration:500},labelComponent:r.createElement(E.Z,null),style:{data:{stroke:e=>e.datum.yval-e.datum.err>this.state.p||e.datum.yval+e.datum.err<this.state.p?"darkred":"steelblue"}},data:this.state.errorBars,x:"num",y:"yval",errorY:e=>e.err,labels:e=>e.datum.text}),r.createElement(y.Z,{data:[{x:1,y:this.state.p},{x:20,y:this.state.p}]})):null}render(){const{t:e}=this.props;let t;return t=this.props.intro?this.props.intro:r.createElement("div",null,r.createElement("p",null,r.createElement(o.c,{i18nKey:"binomial-intro",ns:"LearnConfidenceCoverage"},"Now we will switch to asking a Yes/No question about a population. We are interested in estimating the true population proportion ",r.createElement($.Z,{raw:"p"}),' of "Yes" answers (for example, what proportion of the population has blue eyes?).  We can take a sample of size ',r.createElement($.Z,{raw:"n"}),', find how many observations in our sample are a "Yes" (X), and then estimate the true proportion ',r.createElement($.Z,{raw:"p"})," with ",r.createElement($.Z,{raw:"\\hat{p} = \\frac{X}{n}",elems:L}),". Then ",r.createElement($.Z,{raw:"\\hat{p} \\sim \\text{Normal}\\left( p, \\sqrt{ \\tfrac{p(1-p)}{n} } \\right)",elems:L}),". Our confidence interval is then ",r.createElement(B.Z,{tooltip:`${this.state.useSampleProp?e("click-pop-proportion"):e("click-sample-proportion")}`,active:this.props.sampleStats,onChange:e=>{this.setState({useSampleProp:1===e})}},r.createElement($.Z,{raw:`\\hat{p} \\pm Z_{${this.props.quartileNotation?"\\alpha/2":"\\text{critical}"}} \\cdot \\sqrt{ \\frac{p(1-p)}{n}}`,elems:L}),r.createElement($.Z,{raw:`\\hat{p} \\pm Z_{${this.props.quartileNotation?"\\alpha/2":"\\text{critical}"}} \\cdot \\sqrt{ \\frac{\\hat p(1-\\hat p)}{n}}`,elems:L})),".")),r.createElement("p",null,r.createElement(o.c,{i18nKey:"binomial-intro-end",ns:"LearnConfidenceCoverage"},"For our choice of sample size (n), true proportion ",r.createElement($.Z,{raw:"p"}),", and confidence level, we will simulate ",r.createElement($.Z,{raw:"20"})," different samples from our normal distribution and calculate the corresponding sample proportions and confidence intervals."))),r.createElement(c.Z,{className:"coverage-card"},r.createElement(c.Z.Header,{as:"h4"},e("confidence-interval-coverage")),r.createElement(c.Z.Body,null,r.createElement(s.Z,null,r.createElement(m.Z,null,t),r.createElement(m.Z,null,r.createElement(p.Z,{md:5},r.createElement(T.Z,{title:e("change-parameters"),onGenerate:this.onGenerate,autoStart:!0,id:"confidence_coverage_binomial"},r.createElement(_.Z,{legend:`${e("sample-size")} (n)`,defaultValue:30,max:999,step:1}),r.createElement(_.Z,{legend:`${e("true-proportion")} (p)`,defaultValue:.5,max:1,min:0,step:.01}),r.createElement(Y.Z,{legend:e("confidence-level"),defaultValue:.95,min:.01,max:.99,step:.01,fractionDigits:2})),r.createElement(z.Z,{id:"coverage-module-binomial"})),r.createElement(p.Z,{md:7},r.createElement(c.Z,null,r.createElement(c.Z.Header,{as:"h4"},e("confidence-intervals")),r.createElement(c.Z.Body,null,this.renderChart(),r.createElement("p",null,e("capture-true-proportion",{nTrapped:this.state.nTrapped})," ",r.createElement("b",null,"(",e("coverage"),": ",this.state.nTrapped/20,").")))))))))}}O.defaultProps={intro:null,quartileNotation:!0,sampleStats:!0},O.propTypes={intro:l().oneOfType([l().node,l().string]),quartileNotation:l().bool,sampleStats:l().bool},t.default=(0,i.Z)("learn/confidence-coverage")(O)}}]);