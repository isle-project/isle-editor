"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[33678],{75149:function(e,t,a){a.r(t);var n=a(202784),s=a(213980),o=a.n(s),i=a(198),l=a(770561),r=a(471275),m=a(458264),h=a(312594),c=a(790817),d=a(257457),u=a(323522),g=a(396234),p=a(328731),E=a(690299),y=a.n(E),M=a(32593),b=a.n(M),f=a(74039),x=a.n(f),v=a(848941),D=a.n(v),L=a(523632),Z=a.n(L),w=a(113999),A=a.n(w),S=a(841908),C=a.n(S),G=a(172888),k=a(123103),N=a(302108),_=Object.defineProperty,T=(e,t,a)=>(((e,t,a)=>{t in e?_(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a})(e,"symbol"!=typeof t?t+"":t,a),a);const j=y()("isle:mean-vs-median");class P extends n.Component{constructor(e){super(e),T(this,"medianEvaluation",(e=>{if(e.stopPropagation(),!this.state.showLognormalMedian){let e=b()(A().median(this.state.mu,this.state.sigma)-this.state.medianLognormalGuess),t=this.props.t("a-bit-off"),a=this.state.lognormalDomain.x[1];e<a/10&&(t=this.props.t("good")),e<a/20&&(t=this.props.t("very-good")),this.singleAccMedian(e);const n=this.context;n.addNotification({title:this.props.t("score"),message:t,position:"tc",level:"success"}),n.log({id:this.props.id,type:"MEDIAN_GUESS_DISTANCE",value:e}),this.setState({showLognormalMedian:!0})}})),T(this,"meanEvaluation",(e=>{if(e.stopPropagation(),!this.state.showLognormalMean){let e=b()(A().mean(this.state.mu,this.state.sigma)-this.state.meanLognormalGuess),t=this.props.t("a-bit-off"),a=this.state.lognormalDomain.x[1];e<a/10&&(t=this.props.t("good")),e<a/20&&(t=this.props.t("very-good")),this.singleAccMean(e);const n=this.context;n.addNotification({title:this.props.t("score"),message:t,position:"tc",level:"success"}),n.log({id:this.props.id,type:"MEAN_GUESS_DISTANCE",value:e}),this.setState({showLognormalMean:!0})}})),T(this,"generateData",(()=>{let e=1*this.rand()-.5,t=2*this.rand()+.01,a=4+A().stdev(e,t),n=Z()(0,a,80).map((a=>({x:a,y:A().pdf(a,e,t)})));this.setState({lognormalData:n,mu:e,sigma:t,lognormalDomain:{x:[0,a],y:[0,A().pdf(A().mode(e,t),e,t)]},showLognormalMean:!1,showLognormalMedian:!1})})),this.state={mu:0,sigma:1,lognormalData:[],lognormalDomain:{x:[0,4],y:[0,3]},meanLognormalGuess:1,medianLognormalGuess:1,showLognormalMean:!1,showLognormalMedian:!1};const t={};e.seed&&(t.seed=e.seed),this.rand=D().factory(t),this.singleAccMean=C()(),this.groupAccMean=C()(),this.singleAccMedian=C()(),this.groupAccMedian=C()()}componentDidMount(){this.generateData();const e=this.context;this.unsubscribe=e.subscribe(((e,t)=>{if(e===N.Wh)if("MEDIAN_GUESS_DISTANCE"===t.type){const e=t.value;this.groupAccMedian(e),this.forceUpdate()}else if("MEAN_GUESS_DISTANCE"===t.type){const e=t.value;this.groupAccMean(e),this.forceUpdate()}}))}componentWillUnmount(){this.unsubscribe&&this.unsubscribe()}renderMeanPanel(){const{t:e}=this.props;return n.createElement(c.Z,null,n.createElement(c.Z.Header,{as:"h4"},e("mean")),n.createElement(c.Z.Body,null,n.createElement(u.k,{domain:this.state.lognormalDomain,containerComponent:n.createElement(g.Z,{events:{onClick:this.meanEvaluation},cursorDimension:"x",cursorLabel:e=>`${x()(e.x,-1)}`,onCursorChange:e=>{j(`Received cursor change: ${e}`),this.state.showLognormalMean||this.setState({meanLognormalGuess:e})}})},n.createElement(p.j,{data:this.state.lognormalData,x:"x",y:"y"}),this.state.showLognormalMean?n.createElement(p.j,{data:[{x:this.state.meanLognormalGuess,y:0},{x:this.state.meanLognormalGuess,y:this.state.lognormalDomain.y[1]}],labels:["Your Guess",""]}):null,this.state.showLognormalMean?n.createElement(p.j,{data:[{x:A().mean(this.state.mu,this.state.sigma),y:0},{x:A().mean(this.state.mu,this.state.sigma),y:this.state.lognormalDomain.y[1]}],labels:["","True Mean"]}):null)))}renderMedianPanel(){const{t:e}=this.props;return n.createElement(c.Z,null,n.createElement(c.Z.Header,{as:"h4"},e("median")),n.createElement(c.Z.Body,null,n.createElement(u.k,{domain:this.state.lognormalDomain,containerComponent:n.createElement(g.Z,{events:{onClick:this.medianEvaluation},cursorDimension:"x",cursorLabel:e=>`${x()(e.x,-1)}`,onCursorChange:e=>{this.state.showLognormalMedian||this.setState({medianLognormalGuess:e})}})},n.createElement(p.j,{data:this.state.lognormalData,x:"x",y:"y"}),this.state.showLognormalMedian?n.createElement(p.j,{data:[{x:this.state.medianLognormalGuess,y:0},{x:this.state.medianLognormalGuess,y:this.state.lognormalDomain.y[1]}],labels:["Your Guess",""]}):null,this.state.showLognormalMedian?n.createElement(p.j,{data:[{x:A().median(this.state.mu,this.state.sigma),y:0},{x:A().median(this.state.mu,this.state.sigma),y:this.state.lognormalDomain.y[1]}],labels:["","True Median"]}):null)))}render(){const{t:e}=this.props;return n.createElement(c.Z,{style:this.props.style},n.createElement(c.Z.Header,{as:"h3"},this.props.header?this.props.header:e("measures-of-location-header")),n.createElement(c.Z.Body,null,n.createElement(r.Z,null,this.props.intro,n.createElement(m.Z,null,n.createElement(h.Z,{md:6},this.renderMeanPanel()),n.createElement(h.Z,{md:6},this.renderMedianPanel())),n.createElement(m.Z,null,n.createElement("div",{style:{paddingTop:"20px",maxWidth:400,margin:"0 auto 10px"}},n.createElement(l.Z,{variant:"primary",size:"lg",onClick:this.generateData},e("generate-new-data")))),n.createElement(m.Z,null,this.props.showStatistics?n.createElement(d.Z,{bordered:!0},n.createElement("thead",null,n.createElement("tr",null,n.createElement("th",null),n.createElement("th",null,e("you")),n.createElement("th",null,e("group")))),n.createElement("tbody",null,n.createElement("tr",null,n.createElement("th",null,e("average-distance-from-mean")),n.createElement("td",null,x()(this.singleAccMean(),-2)),n.createElement("td",null,x()(this.groupAccMean(),-2))),n.createElement("tr",null,n.createElement("th",null,e("average-distance-from-median")),n.createElement("td",null,x()(this.singleAccMedian(),-2)),n.createElement("td",null,x()(this.groupAccMedian(),-2))))):null)),this.props.feedback?n.createElement(G.Z,{id:"mean-vs-median"}):null))}}P.defaultProps={feedback:!1,header:null,id:"mean_vs_median",intro:null,seed:null,showStatistics:!1,style:{}},P.propTypes={feedback:o().bool,header:o().string,id:o().string,intro:o().node,seed:o().number,showStatistics:o().bool,style:o().object},P.contextType=k.Z,t.default=(0,i.Z)("learn/mean-vs-median")(P)}}]);