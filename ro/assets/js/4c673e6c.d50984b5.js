"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1048],{603905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(202784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=u(n),d=i,f=c["".concat(p,".").concat(d)]||c[d]||s[d]||a;return n?r.createElement(f,o(o({ref:t},m),{},{components:n})):r.createElement(f,o({ref:t},m))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},778292:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return d},metadata:function(){return f},assets:function(){return k},toc:function(){return b},default:function(){return g}});var r=n(603905),i=Object.defineProperty,a=Object.defineProperties,o=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,m=(e,t,n)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,s=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&m(e,n,t[n]);if(l)for(var n of l(t))u.call(t,n)&&m(e,n,t[n]);return e};const c={id:"random-forest",title:"Random Forest",sidebar_label:"Random Forest"},d=void 0,f={unversionedId:"models/random-forest",id:"models/random-forest",title:"Random Forest",description:"P\u0103duri aleatorii.",source:"@site/i18n/ro/docusaurus-plugin-content-docs/current/models/random-forest.md",sourceDirName:"models",slug:"/models/random-forest",permalink:"/ro/docs/models/random-forest",editUrl:"https://github.com/isle-project/isle-editor/edit/master/docusaurus/website/docs/models/random-forest.md",tags:[],version:"current",lastUpdatedBy:"Planeshifter",lastUpdatedAt:1622573195,formattedLastUpdatedAt:"01.06.2021",frontMatter:{id:"random-forest",title:"Random Forest",sidebar_label:"Random Forest"},sidebar:"docs",previous:{title:"Principal Component Analysis",permalink:"/ro/docs/models/principal-component-analysis"},next:{title:"Simple Linear Regression",permalink:"/ro/docs/models/simple-linear-regression"}},k={},b=[{value:"Op\u021biuni",id:"op\u021biuni",level:2},{value:"Exemple",id:"exemple",level:2}],N={toc:b};function g(e){var t,n=e,{components:i}=n,m=((e,t)=>{var n={};for(var r in e)p.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&l)for(var r of l(e))t.indexOf(r)<0&&u.call(e,r)&&(n[r]=e[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(t=s(s({},N),m),a(t,o({components:i,mdxType:"MDXLayout"}))),(0,r.kt)("p",null,"P\u0103duri aleatorii."),(0,r.kt)("h2",s({},{id:"op\u021biuni"}),"Op\u021biuni"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"data")," | ",(0,r.kt)("inlineCode",{parentName:"li"},"object (required)"),": obiect de matrice de valori. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"none"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"y")," | ",(0,r.kt)("inlineCode",{parentName:"li"},"(string|Factor) (required)"),": variabil\u0103 de rezultat. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"none"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"x")," | ",(0,r.kt)("inlineCode",{parentName:"li"},"(array<(string|Factor)>|string|Factor) (required)"),": una sau mai multe variabile predictive. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"none"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"type")," | ",(0,r.kt)("inlineCode",{parentName:"li"},"string"),": \xeen prezent, se accept\u0103 doar ",(0,r.kt)("inlineCode",{parentName:"li"},"Classification")," pentru r\u0103spunsuri categorice. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"'Classification'"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"quantitative")," | ",(0,r.kt)("inlineCode",{parentName:"li"},"array<string> (required)"),": matrice de variabile din ",(0,r.kt)("inlineCode",{parentName:"li"},"data")," care sunt ",(0,r.kt)("inlineCode",{parentName:"li"},"cuantitative"),".. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"none"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"nTrees")," | ",(0,r.kt)("inlineCode",{parentName:"li"},"number"),": num\u0103rul de copaci. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"50"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"nTry")," | ",(0,r.kt)("inlineCode",{parentName:"li"},"number"),": num\u0103rul de predictori care trebuie verifica\u021bi la fiecare divizare. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"impurityMeasure")," | ",(0,r.kt)("inlineCode",{parentName:"li"},"string"),": m\u0103sura de impuritate (",(0,r.kt)("inlineCode",{parentName:"li"},"gini")," sau ",(0,r.kt)("inlineCode",{parentName:"li"},"entropie"),"). Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"'gini'"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"scoreThreshold")," | ",(0,r.kt)("inlineCode",{parentName:"li"},"number"),": pragul de punctaj pentru divizare. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"0.01"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"maxTreeDepth")," | ",(0,r.kt)("inlineCode",{parentName:"li"},"number"),": ad\xe2ncimea maxim\u0103 a copacului. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"20"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"minItemsCount")," | ",(0,r.kt)("inlineCode",{parentName:"li"},"number"),": num\u0103rul minim de observa\u021bii \xeen nodurile foliare. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"50"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"onPredict")," | ",(0,r.kt)("inlineCode",{parentName:"li"},"function"),": callback invocat cu obiectul model atunci c\xe2nd se face clic pe butonul de predic\u021bie. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"none"),".")),(0,r.kt)("h2",s({},{id:"exemple"}),"Exemple"),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),"<RandomForest \n    data={heartdisease} \n    type=\"Classification\"\n    y=\"Complications\"\n    x={[ 'Age', 'Cost', 'Interventions', 'Gender' ]}\n    quantitative={[ 'Age', 'Cost', 'Interventions' ]}\n/>\n")))}g.isMDXComponent=!0}}]);