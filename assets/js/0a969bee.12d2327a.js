"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[20771],{603905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var i=n(202784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),u=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},s=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),s=u(n),d=a,k=s["".concat(p,".").concat(d)]||s[d]||m[d]||r;return n?i.createElement(k,l(l({ref:t},c),{},{components:n})):i.createElement(k,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=s;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<r;u++)l[u]=n[u];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}s.displayName="MDXCreateElement"},363610:function(e,t,n){n.r(t),n.d(t,{assets:function(){return f},contentTitle:function(){return d},default:function(){return b},frontMatter:function(){return s},metadata:function(){return k},toc:function(){return N}});var i=n(603905),a=Object.defineProperty,r=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,c=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,m=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&c(e,n,t[n]);if(o)for(var n of o(t))u.call(t,n)&&c(e,n,t[n]);return e};const s={id:"voice-input",title:"Voice Input",sidebar_label:"Voice Input"},d=void 0,k={unversionedId:"input/voice-input",id:"input/voice-input",title:"Voice Input",description:"A voice input component.",source:"@site/docs/input/voice.md",sourceDirName:"input",slug:"/input/voice-input",permalink:"/docs/input/voice-input",draft:!1,editUrl:"https://github.com/isle-project/isle-editor/edit/master/docusaurus/website/docs/input/voice.md",tags:[],version:"current",lastUpdatedBy:"Planeshifter",lastUpdatedAt:1612731787,formattedLastUpdatedAt:"Feb 7, 2021",frontMatter:{id:"voice-input",title:"Voice Input",sidebar_label:"Voice Input"},sidebar:"docs",previous:{title:"Text Input",permalink:"/docs/input/text-input"},next:{title:"Accordion",permalink:"/docs/accordion"}},f={},N=[{value:"Options",id:"options",level:2},{value:"Examples",id:"examples",level:2}],g={toc:N};function b(e){var t,n=e,{components:a}=n,c=((e,t)=>{var n={};for(var i in e)p.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&o)for(var i of o(e))t.indexOf(i)<0&&u.call(e,i)&&(n[i]=e[i]);return n})(n,["components"]);return(0,i.kt)("wrapper",(t=m(m({},g),c),r(t,l({components:a,mdxType:"MDXLayout"}))),(0,i.kt)("p",null,"A voice input component."),(0,i.kt)("h2",m({},{id:"options"}),"Options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"autorecord")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),": controls whether to automatically start recording. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"defaultValue")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),": default text value. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"''"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"grammars")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"array"),": speech grammar list (unsupported). Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"[]"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"legend")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"(string|node)"),": legend displayed in front of input field. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"''"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"mode")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),": set to ",(0,i.kt)("inlineCode",{parentName:"li"},"full")," to display a text input field alongside the microphone, ",(0,i.kt)("inlineCode",{parentName:"li"},"status")," to only display a statusbar with the transcribed texts, ",(0,i.kt)("inlineCode",{parentName:"li"},"microphone")," to show just a button to toggle recording, or ",(0,i.kt)("inlineCode",{parentName:"li"},"none")," when the voice input should be invisible and purely controlled via hotkeys / voice commands. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"'full'"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"maxAlternatives")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"number"),": maximum number of alternatives provided per speech recognition result. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"onChange")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"function"),": callback function invoked when text input value is updated. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"onChange() {}"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"onClick")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"function"),": callback function invoked when clicking on the microphone button. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"onClick() {}"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"onFinalText")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"function"),": callback function invoked once final text is received. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"onFinalText() {}"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"onRecordingStart")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"function"),": callback function invoked when recording is started. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"onRecordingStart() {}"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"onRecordingStop")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"function"),": callback function invoked once recording is stopped. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"onRecordingStop() {}"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"onSegment")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"function"),": callback function invoked with text segments. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"onSegment() {}"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"onSubmit")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"function"),': callback function when submitting text input value by hitting "Enter". Default: ',(0,i.kt)("inlineCode",{parentName:"li"},"onSubmit() {}"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"placeholder")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),": text input placeholder. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"none"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"remote")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"object"),": object with ",(0,i.kt)("inlineCode",{parentName:"li"},"start"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"stop"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"toggle")," and associated hotkeys. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"none"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"className")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),": class name. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"''"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"style")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"object"),": CSS inline styles. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"{}"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"timeout")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"number"),": number of milliseconds after which to timeout the recording. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"none"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"stopTooltip")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),": tooltip message displayed while recording. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"none"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"startTooltip")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),": tooltip message displayed while not recording. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"none"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"tooltipPlacement")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),": direction of the tooltip. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"'left'"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"width")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"number"),": voice input width (in px). Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"500"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"height")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"number"),": voice input height (in px). Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"36"),".")),(0,i.kt)("h2",m({},{id:"examples"}),"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",m({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),'<VoiceInput\n    langage="en-US"\n    defaultValue="Enter text"\n/>\n')))}b.isMDXComponent=!0}}]);